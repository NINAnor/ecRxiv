---
title: "Urban Green Areas"
subtitle: "[NO_URGR_001 to NO_URGR_005] - Green areas in settlements"
format: 
  html:
    embed-resources: true
    code-fold: true
    toc: true
    toc-title: Contents
    toc-depth: 3
    smooth-scroll: true
execute:
  cache: true
author:
  - name: Sylvie Clappe              # Enter name
    email: sylvie.clappe@nina.no  # Enter email
    affiliations:
      - id: myID
        name: Norwegian Institute for Nature Research # Enter affiliations
  - name: Bálint Czúcz              
    email: balint.czucz@nina.no
    affiliations:
      - ref: myID               # To reuse affiliations referecen the id like this
date: 9 Oct, 2025 # Enter date 
callout-icon: false
lightbox: true
css: ../../../style.css
code-links:
      - text: Add a review
        icon: github
        href: https://github.com/NINAnor/ecRxiv
        bibliography: references.bib
---

<!--# This is a template for how to document the indicator analyses. Make sure also to not change the order, or modify, the headers, unless you really need to. This is because it easier to read if all the indicators are presented using the same layout. If there is one header where you don't have anything to write, just leave the header as is, and don't write anything below it. If you are providing code, be careful to annotate and comment on every step in the analysis. Before starting it is recommended to fill in as much as you can in the metadata file. This file will populate the initial table in your output.-->

<!--# Load all you dependencies here -->

```{r setup}
#| include: false
library(knitr)
library(tidyverse)
library(kableExtra)
library(terra)
library(sf)
library(exactextractr)
library(dplyr)
library(purrr)
library(readxl)
library(numform)
knitr::opts_chunk$set(echo = TRUE)
```

```{r source}
#| echo: false
source(here::here("_common.R"))
```

```{r}
#| echo: false
meta <- readxl::read_xlsx("../metadata.xlsx")
st <- meta |>
  filter(Variable == "status") |>
  pull(Value)
version <- meta |>
  filter(Variable == "Version") |>
  pull(Value)
auth <- meta |>
  filter(Variable == "authors") |>
  pull(Value)
year <- meta |>
  filter(Variable == "yearAdded") |>
  pull(Value)
id <- meta |>
  filter(Variable == "indicatorID") |>
  pull(Value)
name <- meta |>
  filter(Variable == "indicatorName") |>
  pull(Value)
url <- meta |>
  filter(Variable == "url") |>
  pull(Value)

meta <- meta |>
  mutate(Variable = case_match(Variable,
    "indicatorID" ~ "Indicator ID" ,
    "indicatorName" ~ "Indicator Name",
    "country" ~ "Country",
    "continent" ~ "Continent",
    "ECT" ~ "Ecosystem Condition Typology Class",
    "yearAdded" ~ "Year added",
    "yearLastUpdate" ~ "Last update",
    .default = Variable
   )
  ) |>
  filter(Variable != "authors")

```

<!--# The following parts are autogenerated. Do not edit. -->

```{r}
#| echo: false
#| results: asis
status(st)
```

::: {layout-ncol="2"}



> **Recommended citation**: `r paste(auth, " ", year, ". ", name, " (ID: ", id, ") ", "v. ", version, ". ecRxiv: https://view.nina.no/ecRxiv/", sep="")`

> **Version**: `r version`

:::

```{=html}
<details>
<summary>Show metadata</summary>
```

```{r tbl-meta}
#| tbl-cap: 'Indicator metadata'
#| echo: false
#| warning: false

meta |>
  select(Variable, Value) |>
  kbl(col.names = NULL) 

```

```{=html}
</details>
```

::: {.callout-tip collapse="true"}

## Logg

<!--# Update this logg with short messages for each update -->
- 30 Jun. 2025 - Version used for NINA Report 2604 
- 01 Sep. 2025 - Original version for ecRxiv
- 08 Oct. 2025 - Cleanup, simplifications
- 17 Oct. 2025 - Last cleanup
:::


<hr />

<!--# Document you work below.  -->

## 1. Summary
<!--# With a maximum of 300 words, describe the indicator in general terms as you would to a non-expert. Think of this as a kind of commmon language summary. It is a good idea to include a bullet point list of the spesific steps in the workflow. Include a mention of the following aspects:
What does the metric represent? Why is this relevant for describing ecosystem condition in this ecosystem? What are the main anthropogenig impact factors? 
What kind of data is used? Shortly, how is the data customized (modified, estimated, integarted) to fit its purpuse as an indicator?
What is the current status of  the metric (can it be used or is it still in development)? How should the metric be used and interpretted, and how should it not be used/interpretted? -->

Green areas in settlements, commonly also called _urban green areas_, provide several critical services for urban residents, such as improving air quality, reducing noise levels, regulating air temperature, providing recreation opportunities, and creating an aesthetically pleasing living environment. The amount of urban green areas available in a settlement has significant impacts on the mental and physical health of its inhabitants. Accordingly, the _share of urban green areas_ is a useful condition indicator for urban ecosystems. This is in line with the EU Regulation on Environmental Economic Accounting (EU Regulation 2024/3024; @eu-2024-3024), which lists _"green areas in cities and adjacent towns and suburbs"_ among the mandatory ecosystem condition indicators to characterise the condition of the ecosystem type _settlements and other artificial areas_ (ET01, henceforward “urban ecosystems” for short;  @cond-gn-eurostat2025).[^1] The diverse definitions of _urban green areas_ often also include small water bodies in an urban context ("_urban blue_"), which are thus considered as a part of _urban green_. In line with this, the indicator presented here also integrates urban blue areas. 

[^1]: The KM-GBF headline indicator [12.1](https://www.gbf-indicators.org/metadata/headline/12-1) ("average share of the built-up area of cities that is green/blue space for public use for all") serves a seemingly similar purposes, but unlike the indicator presented here, it only covers urban green and blue areas that are _accessibile_ to the public. Similarly, two of the Norwegian national environmental indicators (miljøindikator [3.1.2](https://miljostatus.miljodirektoratet.no/miljomal/friluftsliv/miljomal-3.1/miljoindikator-3.1.2) and [3.1.3](https://miljostatus.miljodirektoratet.no/miljomal/friluftsliv/miljomal-3.1/miljoindikator-3.1.3)) also express related quantities, and the list of Eurostat's voluntary condition indicators also contains a loosely defined metric for "accessible urban green" areas (Eurostat, 2023). The share of _all green_ areas, and the share of _accessible green_ areas can both be considered as relevant characteristics of the urban ecosystems, with slightly different functionalities: while the total amount of _all_ green surfaces is critically important for most regulating ecosystem services, the share of _accessible_ greenspaces is vital for cultural services, in particular recreation. The variable he variable that is presented here addresses all green areas. Accessible green areas, if needed, can be implemented in the future as a separate condition indicator. 

There are 3 major steps for calculating this indicator in an arbitrary _ecosystem accounting area_ (e.g. a specific municipality, metropolitan region, county, or the entire country):

1. Identify the _‘target area’_ for which the indicator should be calculated (i.e., the total "urban" area, cf. @Czucz2025a).
2. Within this target area, identify the _'focal features'_ (i.e. the "green areas", cf. @Czucz2025a).
3. Divide the area of the _focal features_ with that of the _target area_.

There are several ways of defining the _target area_ ("urban") and the _focal features_ ("green areas"), and there are several different datasets that can be used. In this document, we present five variants of the indicator based on  different interpretations and datasets -- further possible variants are discussed in @Czucz2025a. 

### 1.1 Interpretation
A value of 1 would mean that a settlement is fully covered in green areas: a situation that is both impossible, and probably also undesirable. Nevertheless, higher values are generally better, because they mean a greener, more "liveable" city.   

### 1.2 Overview of the different indicator versions
* **URGR_004**: The *target area* is the total area of the ecosystem type ET01 (urban ecosystems) in Norway, delineated based on Corine Land Cover (CLC),[^2] while the *focal features* are defined as the non-impervious areas in the Copernicus Imperviousness Density layer (IMD). This is the option which is most aligned with the principles of SEEA EA (@seea-ea), where an ecosystem condition indicators are expected to be representative of their "parent" ecosystem type (see also @Czucz2025a). 

* **URGR_001**: The *target area* is the area of the ecosystem type ET01 (urban ecosystems, defined using CLC) within the municipalities considered as *"cities"* according to Eurostat's degree of urbanisation (DEGURBA) classification (`DEGURBA = 1`). The definition of the *focal features* is the same (non-built-up pixels in Copernicus IMD). This option is close to the complementary "Approach 2" for calculating the mandatory Eurostat indicator according to Eurostat's guidelines @cond-gn-eurostat2025.[^3]

* **URGR_002**: The *target area* is the area of the ecosystem type ET01 (urban ecosystems, defined using CLC) within the municipalities considered as "*towns and suburbs*" according to Eurostat's DEGURBA classification (`DEGURBA = 2`). The definition of the *focal features* is the same (non-built-up pixels in Copernicus IMD). 

* **URGR_003**: The *target area* is the area of the ecosystem type ET01 (urban ecosystems, defined using CLC) within the municipalities considered as "*rural areas*" according to Eurostat DEGURBA classification (`DEGURBA = 3`). The definition of the *focal features* is the same (non-built-up pixels in Copernicus IMD). URGR_002 and URGR_003 are complementary to URGR_001, they present an overview of the share of green areas in the three main types of settlements in Norway. The area-weighted mean of these three indicators (URGR_001-URGR_003, weigthed by the total area of settlements (ET01) in the respective categories) will be equal to URGR_004 for any reporting period.  

* **URGR_005**: The *target area* consists of "metropolitan zones" defined as the municipalities considered as *cities* by Eurostat (`DEGURBA = 1`) combined with the *towns and suburbs* (`DEGURBA = 2`) that are adjacent to them.[^4] The *total area* (whole municipalities) of these "metropolitan zones" is considered as target area. As the total area of Norwegian municipalities is typically dominated by natural ecosystems (forests, wetlands, mountains, etc.) this option actually contradicts the "parent ecosystem principle" of ecosystem accounting (@Czucz2025a), and the resulting indicator is more similar to a little ecosystem extent account than to a condition variable. Nevertheless this option is hardwired into the definition of the mandatory condition variable in the Accounting Regulation (EU Regulation 2024/3024; @eu-2024-3024), and it is presented as the main approach for EU reporting in Eurostat's guidelines @cond-gn-eurostat2025. 

For a national use we recommend URGR_004 for a national use, as this is variant combines an ecologically meaningful definition of the focal features ("green areas") with a SEEA-EA compatible calculation pathway (the target area corresponds to the parent ecosystem[^2]). Nevertheless, this indicator does not follow the official guidance from the European Commission. If users need to report this indicator in an official EU reporting, we recommend to use URGR_005 (possibly with URGR_001 or URGR_004 as complementary indicators). The calculation of URGR_001--URGR_003 for diverse ecosystem accounting areas (EAAs) might also be useful for the additional analytical insight offered by distinguishing the different types of settlements according to their degree of urbanisation.   

[^2]: This correspondence is not perfect, the calculations presented delineate ET01 based on Corine Land Cover (CLC), while ideally this delineation should be based on the Grunnkart (which was not possible to achieve in the current project, partly due to technical issues with Grunnkart testversion 0.2). In future updates of this indicator CLC should be replaced with Grunnkart.     

[^3]: Nevertheless Eurostat's "Approach 2" delineates _urban ET_ with a different datset (GHSL [SMOD](https://human-settlement.emergency.copernicus.eu/download.php?ds=smod)), and in addition to the urban parts of the municipalities classified as _cities_, it also includes the _towns and suburbs_ adjacent to them in the scope of the *target area* (see more in Eurostat 2025 and Czucz et al. 2025a)   

[^4]: Currently there are four such metropolitan areas in Norway: Oslo (consisting of Oslo\*, Ås, Asker, Bærum\*, Lier, Lillestrøm, Lørenskog\*, Nittedal, Nordre Follo\*, Rælingen\*), Bergen (consisting of Bergen\*, Bjørnafjorden), Trondheim (consisting of Trondheim\*, Malvik), and Stavanger (consisting of Stavanger\*, Gjesdal, Klepp, Randaberg, Sandnes\*, Sola, Strand, Time). Here we marked the municipalities of `DEGURBA=3` ("cities") with an asterisk (\*).  

## 2. About the underlying data
<!--# Describe the data you have used in more detail, it's origin, biases, availabilit ect.-->
We use the following three main datasets in our calculations:

* **Copernicus HRL IMD 2018** High resolution raster layers from the Copernicus Land Monitoring Service used to define the *focal features* (green areas) in the variants URGR_001-004. More concretely, we define "green areas" as the total area of non-impervious surfaces within the target area, which thus covers all green and blue surfaces, including any parks, gardens, lawns, hedges, green roofs, ponds, rivers, forests, etc. that are small enough to belong to the 'target area' (defined as the urban areas of the CLC products).[^5]

* **Grunnkart**: Norway's official *ecosystem type map* designed to support ecosystem accounting (@strand2024; @gk2). This map is used to define the *focal features* in the variant aligned with the EU mandatory indicator (URGR_010). More concretely, in URGR_010 we define *urban green areas* as any occurrences of the following ecosystem types within the *target area* (the entire area of the metropolitan  municipalities): 1.4 Urban greenspace; 1.5.2 Cemeteries; 2. Cropland; 3. Grassland; 4. Forest and woodlands; 5. Heathland and shrub; 6. Sparsely vegetated ecosystems; 7. Inland wetlands; 8. Rivers and Canals; 9. Lakes and reservoirs; 11. Coastal beaches, dunes and wetlands.
This list includes all ecosystems, within the EU Ecosystem Typology (@et-typo-eurostat), that have a green (or blue) cover during (the majority of) the vegetation season (including large natural ecosystems outside an urban context). 

* **Copernicus CLC 2018** raster layers from the Copernicus Land Monitoring Service used to delineate the *target area* (urban ecosystems, ET01) in the variants URGR_001-004. More concretely, urban ecosystems are defined as the total area covered by the CLC level-1 class "1. Artificial areas".[^6] 

In addition we use several further administrative datasets to delineate the individual municipalities (=Local Administrative Units, LAU), as well as to determine their “degree of urbanisation” (DEGURBA), and to assign them to regions (counties, “fylke”). These administrative units are also used to delineate the *target area* in the "official EU variant" (URGR_005). 


[^5]: The new the CLC+ Backbone product (discussed also in the GN/EC) could have been an alternative data source for delineating the "focal features" instead of IMD. Nevertheless, IMD allowed us to use a much higher (1x1 m, subpixel-level) spatial resolution for detecting "green areas" (see more details in section 2.1), which is we chose this product over CLC backbone.

[^6]: In the future updates of these variants it may be desirable that CLC would be replaced by the newer versions of the Grunnkart, using the area of ecosystem type ET01 (*Settlements and other artificial areas*) to define the "target area". This option  was not available in the current release due to technical difficulties. 


### 2.1 Spatial and temporal resolution and extent
<!--# Describe the temporal and spatial resolution and extent of the data used -->
The nominal resolution of Copernicus HRL IMD is 100 m^2^ (10 x 10 m), but each pixel contains information about the density (%) of (non-)impervious surfaces in the grid cell, making it possible to determine the density of focal features (urban green) with a useful resolution of 1 m^2^ (variants URGR_001-004). This layer is normally updated in every third year, and the updates usually become available with a delay of 2-3 years. 

The spatial resolution of Copernicus CLC is 100 m^2^. The "classic" Copernicus CLC datasets have a long time series with an 6-year update cycle. The next update will cover the year 2024, and it is scheduled for 2026. Nevertheless, the long-term future of this dataset seems uncertain.  

All other spatial data files, including the Grunnkart and the Local Administrative Units (LAU) are vector data (polygons). Unlike traditional land cover maps (e.g., CLC), the Grunnkart does not have a single, universal Minimum Mapping Unit (MMU). Instead, the spatial resolution of the Grunnkart is directly inherited from the underlying source datasets used in its creation. This is because the new map is a synthesis and reclassification of existing data rather than a new, independent mapping effort. As the majority of spatial information available in public datasets focusses on human settlements and infrastructure, urban ecosystems are relatively finely represented in the Grunnkart, especially compared to seminatural and natural ecosystem types. This makes the contours of ET01 overly-detailed, often delineating individual buildings or roads passing through a forest as “urban ecosystems”. This also makes the dataset somewhat unfit for its purpose (@Rendon2025) and cumbersome to process.


### 2.2 Original units
<!--# What are the original units for the most relevant  variables in the data-->
The original unit of Copernicus HRL imperviousness is percentages (the share of impervious areas in the pixel), which is the complement of our quantity of interest (1-imperviousness, interpreted as the share of "urban green" surfaces in the pixel, also in %). This is congruent with the units of the final variable (the share of urban green in the "target area"), which can be expressed both as a number between 0 and 1, as well as in percentages (%). 

### 2.3 Additional comments about the dataset
<!--# Text here -->
The actual boundaries of the municipalities were taken from Eurostat Local Administrative Units (2023). Note that in URAQ and TCCD, which are indicators closely related to URGR, we updated Eurostat Local Administrative Units with the Kartverkert national municipalities boundaries (2024). This was because the results were displayed by each municipality individually. In URGR, we chose to report by the results by region due to heavier computation time, hence Eurostat Local Administrative Units (2023) did not need any corrections. The DEGURBA dataset we only used to classify the Norwegian municipalities into three categories (1: “cities”, 2: “towns and suburbs”, 3: “rural areas”) based on their degree of urbanisation.


#### 2.3.1 Instructions for citing, using and accessing data
<!--# Is the data openly available? If not, how can one access it? What are the key references to the datasets?   -->

|| Publicly accessible | Data and metadata available at |
|----|--|--------|
| **Copernicus HRL IMD**     | Yes | Available from the [EEA](https://land.copernicus.eu/en/products/high-resolution-layer-imperviousness)
| **Copernicus CLC**      | Yes | Available from the [EEA](https://land.copernicus.eu/en/products/corine-land-cover?tab=datasets)
| **Grunnkart**  | No, only upon request to NIBIO | We used testversion 0.2, description available in @strand2024 and @gk2 |


## 3. Indicator properties

### 3.1 Ecosystem Condition Typology Class (ECT)
<!--# Describe the rationale for assigning the indicator to the ECT class. See https://oneecosystem.pensoft.net/article/58218/
This doesnt need to be very long. Maybe just a single sentence. -->

As as it describes the physical structure of urban ecosystems, the condition variable *urban green areas* (i.e. the share of green areas in urban ecosystems) belongs to ECT class B2 (structural state characteristics).


### 3.2 Ecosystem condition characteristic
<!--# Describe the ecosystem condition characteristic represented in the indicator. See 10.3897/oneeco.6.e58218 for information on what these characteristics might be.
For example, and indicator called 'Trenching in mires' could be made to represent an ecosystem characteristic 'Intact hydrology'. The term 'characteristic' is used similar to the term 'criteria' in Multiple Criteria Decition Making. -->

The share of *urban green* areas characterises the amount of biologically active surfaces that is present in an urban environment. Urban green spaces provide important ecosystem services that are essential to the wellbeing of the human communities living in urban settlements. The presence of green spaces also ensures habitats for wildlife with urban areas.


### 3.3 Other standards
<!--# Optional: Add text about other spesific standards, e.g. national standards, and how the indicator relates to these -->
In this documentation, we present different variants of the urban green indicator. We recommend to use URGR_004 as it relies on the most ecologically correct definition, in line with the System of Environmental Economic Accounting - Ecosystem Accounting (@seea-ea). It however does not follow the official guidance from the European Commission for national reporting under EU Regulation 2024/3024 (@eu-2024-3024). If users need to report this indicator in an official EU reporting, we recommend to use URGR_005.

### 3.4 Collinearities with other indicators
<!--# Describe known collinearities with other metrices (indicators or variables) that could become problematic if they were also included in the same Ecosystem Condition Assessment as the indicator described here. -->
This indicator might present a high correlation with the urban Tree Cover Density (TCCD) indicator. There may also be significant correlations with the Urban Air Quality (URAQ) indicator, as well as any future indicator reflecting the *accessibility* of urban green areas.[^1] 


### 3.5 Impact factors
<!--# Describe the main natural and anthropogenic factors that affecst the metric -->
The share of urban green spaces is overwhelmingly determined by anthropogenic processes, including conscious urban planning.


## 4. Reference condition and levels

### 4.1 Reference condition
<!--# Define the reference condition (or refer to where it is defined). Note the destinction between reference condition and reference levels 10.3897/oneeco.5.e58216  -->
For urban ecosystems SEEA EA suggests the identification of an “anthropogenically derived” reference condition (SEEA EA 5.72, a.k.a. “best attainable condition, @valecillo2022). This type of reference condition cannot be”sampled” (there is no clear reference set of “cities” in an “optimal/ideal/natural condition”), but an optimal reference level (X~100~) can possibly still be established (e.g. via extrapolation from an X~60~, see @Czucz2025b).


### 4.2 Reference levels
<!--# If relevant (i.e. if you have normalised a variable), describe the reference levels used to normalise the variable. 
Use the terminology where X~0~ referes to the referece level (the variable value) denoting the worst possible condition; X~100~denotes the optimum or best possible condition; and X~*n*~, where in is between 0 and 100, denotes any other anchoring points linking the variable scale to the indicator scale (e.g. the threshold value between good and bad condition X~60^). 
Why was the current option chosen and how were the reference levels quantified? If the reference values are calculated as part of the analyses further down, please repeat the main information here.  -->

For this variable, the zero value can be considered as a universally meaningful "pessimal level" (X~0~): a situation with no green areas represents the worst possible condition of an uran area from the perspective of this variable. 
In principle, it could also be possible to assign further reference levels (e.g. a "good-bad" threshold, X~60~) based on elements from planning norms and thresholds (e.g. the "Blue-Green Factor", NS 3845), or from related national/international targets. Nevertheless, the meaning and relevance of these thresholds and targets in the different types of settlements must still be carefully studied before they are operatively used for rescaling this condition variable. And if both X~0~ and X~60~ are identified, then it will also be possible to set a meaningful X~100~ by means of extrapolation (@Czucz2025b).

In any case, the identification of the reference levels for this variable is not a purely ecologist task, and in the context of the current project the necessary interdisciplinary understanding could not be achieved.


#### 4.2.1 Spatial resolution and validity
<!--# Describe the spatial resolution of the reference levels. E.g. is it defined as a fixed value for all areas, or does it vary. Also, at what spatial scale are the reference levels valid? For example, if the reference levels have a regional resolution (varies between regions), it might mean that it is only valid and correct to use for normalising local variable values that are first aggregated to regional scale. However, sometimes the reference levels are insensitive to this and can be used to scale variables at the local (e.g. plot) scale.  -->
X~0~ (no urban green) can be seen as a universal reference level, which is valid for any occurrences and subtypes of ET01 (in any type of settlement) at any spatial resolution over all Norway. Ideally, further reference levels (determined in the future) should also be universal reference levels – even if planning norms are different in the different municipalities. This would lead to a cleaner and more transparent indicator, and then the individual municipalities could express their differences by setting different targets for this variable. As each settlement consists of denser and greener parts, the spatial scale of applying the reference levels will also be critical.

## 5. Uncertainties
<!--# Describe the main uncertainties or sources of error in the indicator or the underlying data. -->
There are several sources of uncertainties affecting the values of this indicator and its subsequent use:

* data uncertainties in Copernicus HRL IMD: according to the official validation results this dataset has a thematic accuracy above 90%, so this source of uncertainty is relatively minor. 

* semantic uncertainties in the definition of *green areas* (focal features): for URGR_001-004 we defined *green* as the lack of imperviousness. Nevertheless, there may be some cases when an area in a city is neither impervious nor green (e.g. unpaved parking lots). No definition and data source can be completely free from such "semantic mismatches", and ideally their assessment should be part of a validation study for each indicator. Nevertheless, in the frame of the present study, we could not assess the magnitude of these semantic mismatches. 

* uncertainties of defining the target area: the indicator variants URGR_001-004 rely on CLC for defining the target areas. This does not fully meet the "parent ecosystem", which is defined in the extent accounts based on the Grunnkart. This can be interpreted as a sematic mismatch ("urban" is defined in a different way in CLC and the Grunnkart), which may result in a bias. Furthermore CLC also has some data uncertainties (thematic accuracy >= 85%).

* thematic bias for URGR_005: in this variant the green areas are dominated by a huge mass of natural ETs, and the value of indicator is ultimately determined by the shape & size of the municipalities (LAUs), i.e. distant administrative designations that have nothing to do with the condition of the respective settlement areas. From the perspective of the indicator this is a huge bias, which may it completely unfit for purpose.
  

## 6. References
<!--# You can add references manually or use a citation manager and add intext citations as with crossreferencing and hyperlinks. See https://quarto.org/docs/authoring/footnotes-and-citations.html -->


::: {#refs}
:::


<!-- Aune-Lundberg, L., Steinnes, M., Lund, M.O., Arneberg, E. & Munsterhjelm, N. 2025. Testversjon 2 – Nasjonalt grunnkart for bruk i arealregnskap. NIBIO Rapport 11/50/2025. (in Norwegian) -->

<!-- Czúcz, B., Framstad, E., Clappe, S. & Nowell, M. 2025a. Exploring the use of Eurostat’s mandatory and voluntary indicators in Norway. NINA Report 2604. Norwegian Institute for Nature Research. -->

<!-- Czúcz, B., Lappalainen, M., Jernberg, S., Korpinen, S. 2025b. Report on definition of reference conditions that describe good ecosystem condition. SELINA Deliverable 3.3. https://project-selina.eu/ -->

<!-- Eurostat 2023. Ecosystem condition accounts – Guidance Note, Fourth Draft. Eurostat Unit E2, Task Force on Ecosystem Accounting, 05 October 2023. Doc. ENV/EA/TF/2023_3/4v2. -->

<!-- Eurostat 2024. EU Ecosystem typology. Technical Note. Version: September 2024. Eurostat. Supplementary document to Doc. ENV/EA/TF/2024_3/2a. --> 

<!-- Eurostat 2025. Ecosystem Condition Accounts – Guidance Note, 6th Draft. Eurostat Unit E2, Task Force on Ecosystem Accounting, 26-27 February 2025. Doc. ENV/EA/TF/2025_1/2. https://circabc.europa.eu/ui/group/922b4700-1c83-4099-b550-763badab3ec0/library/5074c555-99ea-4931-ace8-9351fa174f8b -->

<!-- Strand, G.-H., Steinnes, M., Arneberg, E., Lund, M.O., Munsterhjelm, N., Aune-Lundberg, L. & Rørholt, A. 2024. Grunnkart for bruk i arealregnskap. NIBIO Rapport 10/28/2024. (in Norwegian) -->

<!-- UN et al. 2024. System of Environmental Economic Accounting – Ecosystem Accounting. United Nations, Department of Economic and Social Affairs, Statistics Division. Statistical Papers, Series F No. 124. -->


## 7. Datasets

All the datasets used to compile the different versions of the URGR indicators have been thoroughly described in the previous sections, links to them are also provided for more information.

We used the following six datasets:

* **D-1a**: Copernicus IMD (EEA): a series of raster datasets used to quantify the "green areas" in URGR_001-004
* **D-1b**: Grunnkart (NIBIO): a high-resolution vector dataset used to quantify the "green areas" in URGR_005
* **D-2**: Copernicus CLC (EEA): a raster dataset used to delineate urban areas (Class 1: artificial areas) in URGR_001-004
* **D-3**: LAU data (Local Administrative Units, Eurostat GISCO): a vector dataset was used as the primary data source to delineate the municipalities
* **D-4**: DEGURBA (Degree of urbanisation) A tabular dataset assigning one of three DEGURBA classes (1: “cities”; 2: “towns and suburbs”; 3: “rural areas”) to each municipality. These classes were used to breakdown the results for URAQ_001-003.
* **D-5**: Norwegian administrative identifiers for municipalities and fylke was used to correct the municipalities’ ID numbers and to add fylke (county) IDs too.


## 8. Spatial units
<!--# Describe the spatial units that you rely on in your analyses. Highlight the spatial units (the resolution) that the indicator values should be interpretted at. Potential spatial delineation data should eb introduced under 7.1. Datasets. We recomend using the SEEA EA terminology opf Basic Spatial Units (BSU), Ecosystem Asses (EA) and Ecosystem Accounting Area (EAA). -->

The indicator values of URGR-001-004 can be interpreted at any spatial scale above the _characteristic scale_ of urban green areas which largely corresponds to the MMU for natural ecosystem types (any forests, lakes, etc below the MMU will be considered as parts of the urban ET, while the larger ones will be seen as non-urban natural ETs). So calculating URGR-001-004 for any planning and administrative unit above the quatier (bydel) level can generally be seen as meaningful. Nevertheless, coarser ecosystem accounting areas (EAA), like the *fylke*s or the *entire country* can also be highly relevant as reporting areas.  

For the variant URGR-005 the smallest interpretable reporting units are the entire metropolitan areas (the entire administrative area of specific groups of "cities and adjacent towns and suburbs").


## 9. Analyses
<!--# Use this header for documenting the analyses. Put code in separate code chunks, and annotate the code in between using normal text (i.e. between the chunks, and try to avoid too many hashed out comments inside the code chunks). Add subheaders as needed. 
Code folding is activated, meaning the code will be hidden by default in the html (one can click to expand it).
Caching is also activated (from the top YAML), meaning that rendering to html will be quicker the second time you do it. This will create a folder inside you project folder (called INDICATORID_cache). Sometimes caching created problems because some operations are not rerun when they should be rerun. Try deleting the cash folder and try again. -->

### 9.1 URGR_005
#### 9.1.1 Preparation of the data
We use the Grunnkart (CLC, **D-1b**) to define the urban green areas (*focal area*).  According to the @cond-gn-eurostat2025, all ecosystem types in the EU Ecosystem Types Typology with a green cover should be included. This means that, in the EU Ecosystem Typology, we only discard: 10. Marine inlets and transitional waters, 12. Marine Ecosystems, and 1. Settlements and Other Artificial areas except classes 1.4 Urban greenspace and 1.5.2 Cemeteries. Note that the new Grunnkart has several tiles and not all of them have the same projection.
```{r}
#| eval: false
#| code-summary: "Create Ecosystem Types datasets"

# Code co-created by Sylvie Clappe and Jennifer E. Hansen
# path to the Grunnkart data
gdb_folder <- "/data/R/GeoSpatialData/LandUse/Norway_Arealregnskap/Original/GrunnkartArealregnskap FGDB-format"

# List the gdb files
gdb_files <- list.files(gdb_folder, pattern = "_gdb\\.gdb$", 
                        full.names = TRUE)

# Define CRS of the first layer (most common CRS of the gdb files)
gk_crs <- st_read(gdb_files[1], query = "SELECT * FROM arealregnskap LIMIT 500") %>%
            crs()

# Function to read a single filtered file
read_gdb <- function(gdb_path, projection_crs) {
  tryCatch({
    layer <- st_read(dsn = gdb_path, layer = "arealregnskap", query = query_string)
  }, error = function(e) {
    message("Error reading: ", gdb_path, "\n", e)
    return(NULL)  # error handling
  })
  
  if (crs(layer) == projection_crs){
    return(layer)} 
  else{
    layer_proj <- st_transform(layer, crs = projection_crs)
    print(crs(layer_proj))
    return(layer_proj)
  }
}

# Create a list of SQL queries: one per ecosystem type
query_string_list <- list()

query_string_list[[1]] <- "SELECT * FROM arealregnskap WHERE okosystemtype_3 = 'Cemeteries'"
query_string_list[[2]] <- "SELECT * FROM arealregnskap WHERE okosystemtype_2 = 'Urban greenspace'"
query_string_list[[3]] <- "SELECT * FROM arealregnskap WHERE okosystemtype_1 = 'Lakes and reservoirs'"
query_string_list[[4]] <- "SELECT * FROM arealregnskap WHERE okosystemtype_1 = 'Cropland'"
query_string_list[[5]] <- "SELECT * FROM arealregnskap WHERE okosystemtype_1 = 'Grassland'"
query_string_list[[6]] <- "SELECT * FROM arealregnskap WHERE okosystemtype_1 = 'Inland wetlands'"
query_string_list[[7]] <- "SELECT * FROM arealregnskap WHERE okosystemtype_1 = 'Sparsely vegetated ecosystems'"
query_string_list[[8]] <- "SELECT * FROM arealregnskap WHERE okosystemtype_1 = 'Rivers and canals'"
query_string_list[[9]] <- "SELECT * FROM arealregnskap WHERE okosystemtype_1 = 'Coastal beaches, dunes and wetlands'"
query_string_list[[10]] <- "SELECT * FROM arealregnskap WHERE okosystemtype_1 = 'Forest and woodlands'"
query_string_list[[11]] <- "SELECT * FROM arealregnskap WHERE okosystemtype_1 = 'Heathland and shrub'"


names(query_string_list) <- c("Cemeteries",
                              "Urban greenspace",
                              "Lakes and reservoirs",
                              "Cropland",
                              "Grassland",
                              "Inland wetland",
                              "Sparsely vegetated ecosystems",
                              "Rives and canals",
                              "Coastal beaches, sand dunes and wetlands",
                              "Forest and woodlands",
                              "Heathland and shrub")

# Run SQL query and store results in a list
et_list <- list()
for (i in 1: length(query_string_list)){
query_string_i <- query_string_list[[i]] 

et_list[[i]] <- gdb_files %>% 
                 map(\(.) read_gdb(., projection_crs = gk_crs, query_string = query_string_i)) %>% 
                 compact() %>%  
                 bind_rows()
}

```


To compile URGR_005, we need the Norwegian Local Administrative Units (LAUs) from Eurostat (**D-3**). According to the @cond-gn-eurostat2025, only LAUs which are cities and the LAUs for towns and suburb adjacent to these cities should be selected. We thus used the DEGURBA variable from Eurostat (**D-4)** to select the cities (DEGURBA = 1) and towns and suburbs (DEGURBA = 2) that were adjacent to these cities. Below are two codes: (i) one to create the dataset from scratch, and (ii) one that reads the dataset already created and available from NINA's internal repository.

```{r}
#| eval: false
#| code-summary: "Create LAUs dataset"

# Read excel file with Degurba variable and select Norway
path_lau <- "/data/P-Prosjekter2/412413_2023_no_edg/git_data/Adminstrative_boundaries_NO/LAU_DEGURBA_Eurostat/"
degurba_lau_no <- read_excel(paste0(path_lau, "EU-27-LAU-2024-NUTS-2024.xlsx"), sheet = "NO")

# Select cities towns and suburbs
cities_sub_no <- degurba_lau_no %>%
                  select("LAU NAME NATIONAL", "DEGURBA") %>%
                  filter(DEGURBA == 1 | DEGURBA == 2) %>%
                  as.data.frame()

# Read shapefile and select Norway
path_lau <- "/data/P-Prosjekter2/412413_2023_no_egd/git_data/Adminstrative_boundaries_NO/LAU_Eurostat/"
lau_eu <- st_read(paste0(path_lau, "LAU_RG_01M_2023_3035.shp"))
lau_no <- lau_eu %>%
           filter(CNTR_CODE == "NO")


# Join cities_sub_no with lau_no
byer_lau <- inner_join(cities_sub_no, 
                       lau_no, 
                       by = join_by("LAU NAME NATIONAL" == "LAU_NAME")) %>%
              st_as_sf()

# Select LAUs with DEGURBA == 1
lau_1 <- byer_lau %>%
          filter(DEGURBA == 1) %>%
          mutate(city_group = c(1, 2, 2, 2, 2, 2, 3, 3, 4))

# Select LAUs with DEGURBA == 2 which are adjacent to lau_1
lau_2 <- byer_lau %>%
          filter(DEGURBA == 2)

lau2_adj_id <- st_touches(lau_1, lau_2) %>%
                unlist() %>%
                unique()

lau_2_adj <- lau_2[lau2_adj_id, ]

# Create a variable to group the four cities and their suburbs
city_group <- vector()
  
for(i in 1:nrow(lau_2_adj)){
  
  if(st_touches(lau_1[1,], lau_2_adj[i,], sparse = FALSE)[,1] == TRUE){
    city_group[i] <- 1
  } 
  else if(TRUE %in% st_touches(lau_1[c(2,3,4,5,6),], lau_2_adj[i,], sparse = FALSE)[,1]){
    city_group[i] <- 2
  }
  else if(TRUE %in% st_touches(lau_1[c(7,8),], lau_2_adj[i,], sparse = FALSE)[,1]){
    city_group[i] <- 3
  }
  else if(st_touches(lau_1[9,], lau_2_adj[i,], sparse = FALSE)[,1] == TRUE){
    city_group[i] <- 4
  } else {city_group[i] <- NA}
}

# Add group variable to LAU adatset
lau_2_adj <- mutate(lau_2_adj, city_group = city_group)

# Final LAUs dataset
lau <- rbind(lau_1, lau_2_adj)

```

```{r}
#| eval: false
#| code-summary: "Upload LAUs from NINA's internal repository"

# Path to the data
path_boundaries<- "/data/P-Prosjekter2/412413_2023_no_egd/git_data/Adminstrative_boundaries_NO/LAU_URGR/"

# Load the data
lau <- st_read(paste0(path_boundaries, "LAUs_URGR.shp"))
```


#### 9.1.2 Data Cleaning
To have correct spatial analyses, all spatial data loaded before must have the same CRS. We already ensured that the ecosystem types from the Grunnkart have the same CRS. But the administrative boundaries now need to be projected in the same CRS as the one from the ecosystem type.
```{r}
#| eval: false
#| code-summary: "Check CRS and reproject"

# ETs from Grunnkart (we take one as they have all the same CRS)
gk_crs <- crs(et_list[[1]])

# LAUs
lau_crs <- crs(lau)

# Check they are the same
gk_crs == lau_crs


# Re-project boundaries
lau_32 <- st_transform(lau, gk_crs)
```

The next step is to check for geometrical and topological issues and fix them if there are. Note that we use the `st_make_valid()` function from the `sf` package. This function did not work for Sparsely vegetated ecosystems so we used `st_buffer (x, 0, 0)` instead.
```{r}
#| eval: false
#| code-summary: "Geometry and topology - check and fix"

# Check for empty geometry
for(i in 1:length(et_list)){
  empty_test <- which(st_is_empty(et_list[[i]]) == TRUE)
  print(empty_test)
}

lau_32_empty <- which(st_is_empty(lau_32) == TRUE)

# Check validity
for(i in 1:length(et_list)){
  validity_test <- which(st_is_valid(et_list[[i]]) == FALSE)
  print(length(validity_test))
}

lau_32_invalid <- which(st_is_valid(lau_32) == FALSE)

# Clean geometry of ETs with st_make_valid()
et_clean_list <- list()
for(i in c(seq(1,6,1), seq(8,11,1))){
  et_clean <- st_make_valid(et_list[[i]])
  et_clean_list[[i]] <- et_clean
}

et_clean_list[[7]] <- st_buffer(et_list[[7]], 0) %>%
  filter(!st_is_empty(.)) %>%
  st_make_valid()

names(et_clean_list) <- names(et_list)

#  Check cleaning geometry worked
for(i in 1:length(et_clean_list)){
  geometry_check <- which(st_is_valid(et_clean_list[[i]]) == FALSE)
  print(length(geometry_check))
}

# Check for empty geometry
for(i in 1:length(et_clean_list)){
  empty_test <- which(st_is_empty(et_clean_list[[i]]) == TRUE)
  print(empty_test)
}

```

Now, we just need to only extract polygons from the ecosystem type data. Some points and line are present. As we are interested in areas, we decide to remove them as they won't contribute to the area estimates. This is also to have a process that will be more comparable to the process used for the other URGR indicators for which only polygons are used due to restrictions in the functionalities of the `exact_extract()` function.
```{r}
#| eval: false
#| code-summary: "Final dataset of ecosystem type"

# Keep only polygon features
et_final <- et_clean_list %>%
              map(\(.) st_collection_extract(.,
                                             type = c("POLYGON"), 
                                             warn = FALSE))

names(et_final) <- names(et_clean_list)
```

The resulting data are quite heavy, it is important to clean the R Environment to free memory space.
```{r}
#| eval: false
#| code-summary: "Clean R Environment"

# Remove non-essential R objects-
rm(list=setdiff(ls(), c("lau_32",
                        "et_final")))

```

#### 9.1.3 Data analyses
First we do an intersection of the ecosystem types with the LAUs. That will result in a layer containing only ecosystem types per LAU only.
```{r}
#| eval: false
#| code-summary: "Intersection ecosystem types with LAUs"
#| 
et_list_lau <- et_final %>%
                  map(\(.) st_intersection(., lau_32))

names(et_list_lau) <- names(et_final)

```

Then, we need to calculate the areas of each ecosystem type within the LAUs and the total area of each LAUs.
```{r}
#| eval: false
#| code-summary: "Total area of ecosystem types per LAUs"
#| 
# Calculate areas of ETs in LAUs
et_lau_area <- et_list_lau %>%
                map(\(.) mutate(., et_area_m2  = st_area(.)))

names(et_lau_area) <- names(et_list_lau)

# Calculate areas of LAUs
lau_total_area <- lau_32 %>%
                    mutate(., lau_area_m2 = unclass(st_area(.))) %>%
                    st_drop_geometry() %>%
                    select(LAU_ID, lau_area_m2)
```

We also group the LAUs into the four "metropolitan areas" (referred to as "city group" below): Trondheim, Oslo, Stavanger, and Bergen. And we calculate the total area of each group.
```{r}
#| eval: false
#| code-summary: "Group LAUs into four clusters"

# Caluclate area per "city group"
city_group_names <- c("Trondheim", "Oslo", "Stavanger", "Bergen")
city_group_area <- lau_32 %>%
                      mutate(., grp_area_m2 = unclass(st_area(.))) %>%
                      st_drop_geometry() %>%
                      select(cty_grp, grp_area_m2) %>%
                      group_by(cty_grp) %>%
                      summarise(cty_grp_area = sum(grp_area_m2)) %>%
                      cbind(., city_group_names)
```

Finally, we can calculate summary tables for URGR_005:
```{r}
#| eval: false
#| code-summary: "Create summary tables"

# Summary table detailed per LAUs
URGR_005_tab <- et_lau_area %>%
                  compact() %>%
                  bind_rows() %>%
                  st_drop_geometry() %>%
                  select(LAUNAMN, DEGURBA, LAU_ID, cty_grp,
                         okosystemtype_1, okosystemtype_2,
                         okosystemtype_3, okosystemtype_kode,
                         et_area_m2) %>%
                  group_by(cty_grp, LAU_ID, LAUNAMN, okosystemtype_1, okosystemtype_2, okosystemtype_3, okosystemtype_kode) %>%
                  summarise(total_area_et_m2 = sum (et_area_m2)) %>%
                  left_join(., lau_total_area, by = "LAU_ID")

# Summary table aggregated per "city group"
URGR_005_tab_city_gr <- URGR_010_tab %>%
                          group_by(cty_grp, okosystemtype_1, okosystemtype_2, okosystemtype_3, okosystemtype_kode) %>%
                          select(!lau_area_m2) %>%
                          summarise(total_area_et_m2 = sum(total_area_et_m2)) %>%
                          left_join(., city_group_area, by = "cty_grp")
```

These table have been exported to the internal repository and will be used in the Results section to create an overall summary table comparing all URGR indicators.





### 9.2 URGR_001-004
#### 9.2.1 Load and prepare the data

In the second part we compile the remaining variants (URGR_001-004) at the national and regional levels based on 2018 data. 

We use a vector version of Corine Land Cover (CLC, **D-2**) 2018 to define "urban areas" (*target area*), as the area covered by CLC Class 1 and its subclasses. This is the category in CLC that is often considered to be equivalent with ET01 (Settlements and other artificial areas, SOAA) in the EU Ecosystem Typology.

To define the "green areas" (*focal features*) within SOAA (the target area), we use Copernicus Imperviousness Density (IMD, **D-1a**), also from 2018. The rationale is that any areas that are not impervious within the SOAA, are green or blue urban areas. IMD consists of tiles which need to be assembled into a virtual raster to be used for analyses.

```{r}
#| eval: false
#| code-summary: "Load and prepare the data"

# Code co-created by Sylvie Clappe and Balint Czucz

# Load CLC 2018
path_clc <- "/data/R/GeoSpatialData/LandCover/Norway_CORINE_Landcover/Original/CORINE_2018/"
clc18_soaa <- st_read(paste0(path_clc, "0000_32632_corine2018_8d4abc_SHAPE.shp")) %>% 
              filter(clc18_kode %in% c(111, 112, 121, 122, 123, 131, 132, 133, 141, 142)) # Extract Class 1 (~=SOAA)

# Create or load the IMD 2018 virtual raster
terra::setGDALconfig("GTIFF_SRS_SOURCE", "EPSG") # to quiet an annoying GDAL warning
path_imd <- "/data/P-Prosjekter2/412413_2023_no_egd/git_data/IMD_2018_010m_no_03035_v020/DATA"
file_imd <- file.path(path_imd, "IMD_2018.vrt")

imd_vrt <- if (!file.exists(file_imd)) {
  path_imd %>% # if it does not exist yet, create the virtual raster
    list.files(pattern= '.tif$', all.files= TRUE, full.names= TRUE) %>% #list of tiles
    vrt(filename= file_imd) 
 } else {
  rast(file_imd) # otherwise just load it  
  }

# Load the LAU db (polygons of municipalities with crosswalk to regions)
path_lau<- "/data/P-Prosjekter2/412413_2023_no_egd/git_data/Adminstrative_boundaries_NO"
munic <- st_read(file.path(path_lau, "LAU_Eurostat", "LAU_EUROSTAT_2024.shp")) %>%
  mutate(a_munic= st_area(geometry)) %>%  #adding a column with the total area of each municipality (=LAU)
  relocate(geometry, .after = last_col())

```

#### 9.2.2 Data cleaning
We perform geometrical and topological checks, check for projection differences, and finally re-project the vector files (`clc18_soaa`, `munic`) to match the CRS of the IMD raster layer (`imd_vrt`). Note that it is good practice to avoid re-projecting rasters as it leads to biases in areas.

```{r}
#| eval: false
#| code-summary: "Geometry and topology - check and fix"

# Check for empty geometry & validity
which(st_is_empty(clc18_soaa))
which(st_is_empty(munic))
which(!st_is_valid(clc18_soaa))
which(!st_is_valid(munic))
# ...all polygons seem to be OK

# Check if the CRS are the same
identical(crs(imd_vrt), crs(munic))
identical(crs(imd_vrt), crs(clc18_soaa))
identical(crs(clc18_soaa), crs(munic))
# ...none of them are identical

# reproject the vector layers (we reuse/overwrite the same objects to spare with memory)
clc18_soaa <- st_transform(clc18_soaa, crs(imd_vrt))
munic <- st_transform(munic, crs(imd_vrt))

```


#### 9.2.3 Data analysis
We link the SOAA polygons (urban areas, `clc18_soaa`) to municipalities (`munic`), and then we dissolve them, to have just a single multiring polygon within each municipality, corresponding to all of the settlements within its boundaries). Then we use `exact_extract()` to get the mean value of the Copernicus IMD pixels that overlap with these polygons. With the help of the polygons and the mean IMD values we then calculate the total "urban area" (all of ET01/SOAA in m^2^) and the "urban green area" (the non-impervious area within the urban area, m^2^) for each municipality.

```{r}
#| eval: false
#| code-summary: "Calculate SOAA area and extract mean % imperviousness"

# Intersection SOAA and municipality boundary, dissolving the different CLC codes into a single SOAA polygon per municipality
munic_soaa <- st_intersection(clc18_soaa, munic) %>%
  group_by(LAU_NAM, DEGURBA, fylk_nr, regn_nm, a_munic) %>%
  summarize(geometry= st_union(geometry))  %>%
  ungroup %>%
  mutate(a_soaa= st_area(geometry)) %>%
  relocate(geometry, .after = last_col())
#TODO/TOCHK: we seem to lose some municipalities somehow (munic contains 357, munic_soaa just 341) 
# --> setdiff(munic$LAU_NAM, munic_soaa$LAU_NAM)
#  [1] "Vevelstad"       "Dønna"           "Rødøy"           "Beiarn"          "Bokn"            "Sande"          
#  [7] "Modalen"         "Solund"          "Askvoll"         "Flatanger"       "Leka"            "Gratangen"      
# [13] "Loppa"           "Unjárga/Nesseby" "Osen"            "Utsira"         


# Calculate "urban green" (=non-impervious) areas per munic
munic_soaa_imd <- munic_soaa %>%
  # head(30) %>% # 10% subset for piloting
  mutate(imd= exact_extract(imd_vrt, geometry, fun= c("mean"))) %>% # mean IMD for each polygon 
  mutate(a_ug = a_soaa * (1-imd/100)) %>% # total urban green per polygon in m2
  # relocate(geometry, .after = last_col())
  st_drop_geometry()


```

Combining the total area of "urban" and "urban green" in each municipality, with their DEGURBA classification, we can calculate URGR_001-004 for each region of Norway. We use the standard error (SE) of the municipal mean indicator values to characterise the uncertainty of the regional values, which is a relatively simple and conservative approach (probably underestimating the real uncertainties). As there are very few municipalities in the "cities" category (`DEGURBA = 1`), the variable URGR_001 has only values three regions, in one of which no uncertainty could be estimated.

```{r}
#| eval: false
#| code-summary: "Create summary tables"

variants <- list(URGR_001="1", URGR_002="2", URGR_003="3", URGR_004=c("1","2","3"))
out1 <- NULL

for (ii in names(variants)) {
  out1[[ii]] <- munic_soaa_imd %>%    # Calculate the national mean values first
    filter(DEGURBA %in% variants[[ii]]) %>%
    # group_by(1) %>%
    summarise(regn_nm= "Norway",
              a_soaa= sum(a_soaa), 
              a_ug= sum(a_ug),
              count_n= n(),
              se_munic= sd(imd)/sqrt(count_n)) %>% # SE of the mean of the municipal means (TODO: replace with a better uncertainty metric)
    mutate(sug= unclass(a_ug / a_soaa)) #share of urban green
  out1[[ii]] <- munic_soaa_imd %>%    # calculate mean values for each region
    filter(DEGURBA %in% variants[[ii]]) %>%
    group_by(regn_nm) %>%
    summarise(a_soaa= sum(a_soaa), 
              a_ug= sum(a_ug),
              count_n= n(),
              se_munic= sd(imd)/sqrt(count_n)) %>% # SE of the mean of the municipal means
    mutate(sug= unclass(a_ug / a_soaa)) %>% #share of urban green
    rbind(out1[[ii]], .) #  append the regional mean values after the national means
  } 

out1_flat <- out1 %>%
  imap(~mutate(.x, indi= .y)) %>%
  list_rbind %>%
  relocate(indi)

# Writing out into a csv for later reuse
path_res <- "/data/P-Prosjekter2/412413_2023_no_egd/Results/URGR/"
out1_flat %>% write_excel_csv(str_c(path_res, "URGR_001-004_results-", format(Sys.time(), "%y%m%d-%H%M"), ".csv"))

```



## 10. Results
<!--# Repeat the final results here. Typically this is a map or table of indicator values.
This is typically where people will harvest data from, so make sure to include all relevant output here, but don't clutter this section with too much output either. -->

### National-level results
These results are presented for all variants. For URGR_010 we could not calculate a reliable measure of uncertainty. The recommended variant for general use is URGR_004.

```{r}
#| eval: true
#| warning: false
#| code-summary: "Code to create a comparative URGR table"

# Load the results files
path_res <- "/data/P-Prosjekter2/412413_2023_no_egd/Results/URGR/"
urgr001_004 <- read_csv(paste0(path_res, "URGR_001-004_results-251009-2341.csv"))

urgr010 <-   read_excel(paste0(path_res, "URGR_001_detailed_results_24MAY25.xlsx"))

# National-level results
res_national <- urgr001_004 %>%
  filter(regn_nm == "Norway") %>%
  select(indi, regn_nm, se_munic, sug) %>%
  bind_rows(tibble(indi="URGR_010", regn_nm= "Norway", se_munic= NA,  
                   sug=sum(urgr010$total_area_et_m2) / 
                     sum(unique(urgr010$lau_area_m2)))) %>% #!!unique, because the LAU areas are repeated in this data frame 
  mutate(Indicator= "Share of urban green areas", year= 2018) %>%
  mutate(sug= round2(sug*100, 2), sd= round2(se_munic, 2) ) %>%
  select(Indicator, ID= indi, 
         `Accounting area`= regn_nm,
         `Accounting period`= year, 
         `Variable value (%)`= sug,
         `Standard deviation (%)`= se_munic)


kbl(res_national)

```

### Regional results
At a regional level we can only show the results for URGR_001-004. Many regions of Norway have zero or just one settlements classified as "cities" (`DEGURBA=1`). For these settlements URGR_001 (or its uncertainty) could not be quantified. The recommended variant for general use is URGR_004.

```{r}
#| eval: true
#| warning: false
#| code-summary: "Code to create a comparative URGR table"

# Load the results files
path_res <- "/data/P-Prosjekter2/412413_2023_no_egd/Results/URGR/"
urgr001_004 <- read_csv(paste0(path_res, "URGR_001-004_results-251009-2341.csv"))

res_regional <- urgr001_004 %>%
  filter(regn_nm != "Norway") %>%
  mutate(Indicator= "Share of urban green areas", year= 2018) %>%
  mutate(sug= round2(sug*100, 2), sd= round2(se_munic, 2) ) %>%
  select(Indicator, ID= indi, 
         `Accounting area`= regn_nm,
         `Accounting period`= year, 
         `Variable value (%)`= sug,
         `Standard deviation (%)`= se_munic)

kbl(res_regional)

```



## 11. Export file
<!--# Optional: Display the code (don't execute it) or the workflow for exporting the indicator values to file. Ideally the indicator values are exported as a georeferenced shape or raster file with indicators values, reference values and errors. You can also chose to export the raw (un-normalised or unscaled variable) as a seperate product. You should not save large sptaial output data on GitHub. You can use eval=FALSE to avoid code from being executed (example below - delete if not relevant) -->

Code to export the result tables above.

```{r export}
#| eval: false
#| code-summary: "Code to export the result tables above"

#CSV
write.table(res_national, "URGR_NO_national_2018.csv")
write.table(res_regional, "URGR_NO_regional_2018.csv")

#Excel
write_xlsx(res_national, "URGR_NO_national_2018.xlsx")
write_xlsx(res_regional, "URGR_NO_regional_2018.xlsx")

```
